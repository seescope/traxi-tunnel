use httparse::{EMPTY_HEADER, Request};
use std::str;

pub fn get_domain(packet: &[u8]) -> Option<&str> {
    let mut headers = [EMPTY_HEADER; 16];
    let mut request = Request::new(&mut headers);

    if request.parse(packet).is_err() {
        return None
    }

    request.headers.into_iter()
        .filter(|ref h| h.name == "Host")
        .map(|&mut h| str::from_utf8(h.value).unwrap())
        .collect::<Vec<&str>>()
        .pop()
}

pub fn get_user_agent(packet: &[u8]) -> Option<&str> {
    let mut headers = [EMPTY_HEADER; 16];
    let mut request = Request::new(&mut headers);

    if request.parse(packet).is_err() {
        return None
    }

    request.headers.into_iter()
        .filter(|ref h| h.name == "User-Agent")
        .map(|&mut h| str::from_utf8(h.value).unwrap())
        .collect::<Vec<&str>>()
        .pop()
}

#[test]
fn test_get_domain() {
    let http_request = vec![
        0x47, 0x45, 0x54, 0x20, 0x2f, 0x20, 0x48, 0x54, 
        0x54, 0x50, 0x2f, 0x31, 0x2e, 0x31, 0x0d, 0x0a, 
        0x48, 0x6f, 0x73, 0x74, 0x3a, 0x20, 0x77, 0x77, 
        0x77, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 
        0x2e, 0x63, 0x6f, 0x6d, 0x0d, 0x0a, 0x55, 0x73, 
        0x65, 0x72, 0x2d, 0x41, 0x67, 0x65, 0x6e, 0x74, 
        0x3a, 0x20, 0x63, 0x75, 0x72, 0x6c, 0x2f, 0x37, 
        0x2e, 0x34, 0x33, 0x2e, 0x30, 0x0d, 0x0a, 0x41, 
        0x63, 0x63, 0x65, 0x70, 0x74, 0x3a, 0x20, 0x2a, 
        0x2f, 0x2a, 0x0d, 0x0a, 0x0d, 0x0a
    ];

    let expected_domain = Some("www.google.com");
    assert_eq!(expected_domain, get_domain(&http_request[..]));
}

#[test]
fn test_get_user_agent() {
    let http_request_with_user_agent = vec![
		0x47, 0x45, 0x54, 0x20, 0x2f, 0x72, 0x65, 0x73, 
		0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x2f, 0x63, 
		0x73, 0x73, 0x2f, 0x6d, 0x61, 0x73, 0x74, 0x68, 
		0x65, 0x61, 0x64, 0x73, 0x2f, 0x31, 0x2e, 0x33, 
		0x2e, 0x31, 0x36, 0x2f, 0x73, 0x6b, 0x69, 0x6e, 
		0x2d, 0x74, 0x68, 0x65, 0x61, 0x67, 0x65, 0x2e, 
		0x63, 0x73, 0x73, 0x20, 0x48, 0x54, 0x54, 0x50, 
		0x2f, 0x31, 0x2e, 0x31, 0x0d, 0x0a, 0x48, 0x6f, 
		0x73, 0x74, 0x3a, 0x20, 0x77, 0x77, 0x77, 0x2e, 
		0x66, 0x61, 0x69, 0x72, 0x66, 0x61, 0x78, 0x73, 
		0x74, 0x61, 0x74, 0x69, 0x63, 0x2e, 0x63, 0x6f, 
		0x6d, 0x2e, 0x61, 0x75, 0x0d, 0x0a, 0x43, 0x6f, 
		0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 
		0x3a, 0x20, 0x6b, 0x65, 0x65, 0x70, 0x2d, 0x61, 
		0x6c, 0x69, 0x76, 0x65, 0x0d, 0x0a, 0x55, 0x73, 
		0x65, 0x72, 0x2d, 0x41, 0x67, 0x65, 0x6e, 0x74, 
		0x3a, 0x20, 0x4d, 0x6f, 0x7a, 0x69, 0x6c, 0x6c, 
		0x61, 0x2f, 0x35, 0x2e, 0x30, 0x20, 0x28, 0x4d, 
		0x61, 0x63, 0x69, 0x6e, 0x74, 0x6f, 0x73, 0x68, 
		0x3b, 0x20, 0x49, 0x6e, 0x74, 0x65, 0x6c, 0x20, 
		0x4d, 0x61, 0x63, 0x20, 0x4f, 0x53, 0x20, 0x58, 
		0x20, 0x31, 0x30, 0x5f, 0x31, 0x32, 0x5f, 0x31, 
		0x29, 0x20, 0x41, 0x70, 0x70, 0x6c, 0x65, 0x57, 
		0x65, 0x62, 0x4b, 0x69, 0x74, 0x2f, 0x35, 0x33, 
		0x37, 0x2e, 0x33, 0x36, 0x20, 0x28, 0x4b, 0x48, 
		0x54, 0x4d, 0x4c, 0x2c, 0x20, 0x6c, 0x69, 0x6b, 
		0x65, 0x20, 0x47, 0x65, 0x63, 0x6b, 0x6f, 0x29, 
		0x20, 0x43, 0x68, 0x72, 0x6f, 0x6d, 0x65, 0x2f, 
		0x35, 0x34, 0x2e, 0x30, 0x2e, 0x32, 0x38, 0x34, 
		0x30, 0x2e, 0x39, 0x38, 0x20, 0x53, 0x61, 0x66, 
		0x61, 0x72, 0x69, 0x2f, 0x35, 0x33, 0x37, 0x2e, 
		0x33, 0x36, 0x0d, 0x0a, 0x41, 0x63, 0x63, 0x65, 
		0x70, 0x74, 0x3a, 0x20, 0x74, 0x65, 0x78, 0x74, 
		0x2f, 0x63, 0x73, 0x73, 0x2c, 0x2a, 0x2f, 0x2a, 
		0x3b, 0x71, 0x3d, 0x30, 0x2e, 0x31, 0x0d, 0x0a, 
		0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x72, 0x3a, 
		0x20, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 
		0x77, 0x77, 0x77, 0x2e, 0x74, 0x68, 0x65, 0x61, 
		0x67, 0x65, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x61, 
		0x75, 0x2f, 0x0d, 0x0a, 0x41, 0x63, 0x63, 0x65, 
		0x70, 0x74, 0x2d, 0x45, 0x6e, 0x63, 0x6f, 0x64, 
		0x69, 0x6e, 0x67, 0x3a, 0x20, 0x67, 0x7a, 0x69, 
		0x70, 0x2c, 0x20, 0x64, 0x65, 0x66, 0x6c, 0x61, 
		0x74, 0x65, 0x2c, 0x20, 0x73, 0x64, 0x63, 0x68, 
		0x0d, 0x0a, 0x41, 0x63, 0x63, 0x65, 0x70, 0x74, 
		0x2d, 0x4c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 
		0x65, 0x3a, 0x20, 0x65, 0x6e, 0x2d, 0x47, 0x42, 
		0x2c, 0x65, 0x6e, 0x2d, 0x55, 0x53, 0x3b, 0x71, 
		0x3d, 0x30, 0x2e, 0x38, 0x2c, 0x65, 0x6e, 0x3b, 
		0x71, 0x3d, 0x30, 0x2e, 0x36, 0x0d, 0x0a, 0x0d, 
		0x0a
    ];

	let http_connect_request = vec![
		0x43, 0x4f, 0x4e, 0x4e, 0x45, 0x43, 0x54, 0x20, 
		0x77, 0x77, 0x77, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 
		0x6c, 0x65, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x63, 
		0x6f, 0x6d, 0x3a, 0x34, 0x34, 0x33, 0x20, 0x48, 
		0x54, 0x54, 0x50, 0x2f, 0x31, 0x2e, 0x31, 0x0d, 
		0x0a, 0x48, 0x6f, 0x73, 0x74, 0x3a, 0x20, 0x77, 
		0x77, 0x77, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 
		0x65, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x63, 0x6f, 
		0x6d, 0x0d, 0x0a, 0x55, 0x73, 0x65, 0x72, 0x2d, 
		0x41, 0x67, 0x65, 0x6e, 0x74, 0x3a, 0x20, 0x63, 
		0x6f, 0x6d, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 
		0x65, 0x2e, 0x4d, 0x61, 0x70, 0x73, 0x2f, 0x34, 
		0x2e, 0x32, 0x35, 0x2e, 0x30, 0x20, 0x69, 0x53, 
		0x4c, 0x2f, 0x31, 0x2e, 0x30, 0x20, 0x69, 0x50, 
		0x68, 0x6f, 0x6e, 0x65, 0x2f, 0x31, 0x30, 0x2e, 
		0x31, 0x2e, 0x31, 0x20, 0x68, 0x77, 0x2f, 0x69, 
		0x50, 0x68, 0x6f, 0x6e, 0x65, 0x37, 0x5f, 0x31, 
		0x20, 0x28, 0x67, 0x7a, 0x69, 0x70, 0x29, 0x0d, 
		0x0a, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 
		0x69, 0x6f, 0x6e, 0x3a, 0x20, 0x6b, 0x65, 0x65, 
		0x70, 0x2d, 0x61, 0x6c, 0x69, 0x76, 0x65, 0x0d, 
		0x0a, 0x50, 0x72, 0x6f, 0x78, 0x79, 0x2d, 0x43, 
		0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 
		0x6e, 0x3a, 0x20, 0x6b, 0x65, 0x65, 0x70, 0x2d, 
		0x61, 0x6c, 0x69, 0x76, 0x65, 0x0d, 0x0a, 0x0d, 
		0x0a
	];

	let expected_user_agent = Some("Mozilla/5.0 (Macintosh; Intel Mac OS X 10_12_1) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/54.0.2840.98 Safari/537.36");
	assert_eq!(expected_user_agent, get_user_agent(&http_request_with_user_agent[..]));

	let expected_user_agent = Some("com.google.Maps/4.25.0 iSL/1.0 iPhone/10.1.1 hw/iPhone7_1 (gzip)");
	assert_eq!(expected_user_agent, get_user_agent(&http_connect_request[..]));
}
